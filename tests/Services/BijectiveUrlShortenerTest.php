<?php

namespace App\Tests\Services;

use App\Entity\ShortUrl;
use App\Exception\UrlShortingFailedException;
use App\Provider\BijectiveConverter;
use App\Repository\ShortUrlRepository;
use App\Services\BijectiveUrlShortener;
use Doctrine\ORM\ORMException;
use PHPUnit\Framework\TestCase;
use Psr\Log\LoggerInterface;
use ReflectionClass;

class BijectiveUrlShortenerTest extends TestCase
{

    private BijectiveUrlShortener $instance;
    private ShortUrlRepository $shortUrlRepository;
    private LoggerInterface $logger;
    private BijectiveConverter $bijectiveConverter;

    private static string $URL_FOR_ENCODE = 'https://www.google.com/';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->shortUrlRepository = $this->getMockBuilder(ShortUrlRepository::class)->disableOriginalConstructor()->getMock();
        $this->bijectiveConverter = $this->getMockBuilder(BijectiveConverter::class)->getMock();
        $this->logger = $this->getMockBuilder(LoggerInterface::class)->getMock();
        $this->instance = new BijectiveUrlShortener($this->bijectiveConverter, $this->shortUrlRepository, $this->logger);
    }

    protected function getShortUrl(int $id): ShortUrl {
        $shortUrl = new ShortUrl();
        $shortUrl->setUrl('https://www.google.com/');
        $reflection = new ReflectionClass($shortUrl);
        $prop = $reflection->getProperty('id');
        $prop->setAccessible(true);
        $prop->setValue($shortUrl, $id);
        return $shortUrl;
    }

    public function testEncodeWhenUrlNotFound()
    {
        $shortUrl = $this->getShortUrl(1);

        $this->shortUrlRepository->expects($this->exactly(1))->method('findOneBy')->with(['url' => self::$URL_FOR_ENCODE])->willReturn(null);
        $this->shortUrlRepository->expects($this->exactly(1))->method('save')->willReturn($shortUrl);
        $this->bijectiveConverter->expects($this->exactly(1))->method('encode')->with(1); // id

        $this->instance->encode(self::$URL_FOR_ENCODE);
    }

    public function testEncodeWhenUrlFound()
    {
        $shortUrl = $this->getShortUrl(2);
        $this->shortUrlRepository->expects($this->exactly(1))->method('findOneBy')->with(['url' => self::$URL_FOR_ENCODE])->willReturn($shortUrl);
        $this->shortUrlRepository->expects($this->never())->method('save');
        $this->bijectiveConverter->expects($this->exactly(1))->method('encode')->with(2); // id

        $this->instance->encode(self::$URL_FOR_ENCODE);
    }

    public function testEncodeWhenExceptionOccur()
    {
        $this->shortUrlRepository->method('findOneBy')->with(['url' => self::$URL_FOR_ENCODE])->willReturn(null);
        $this->shortUrlRepository->method('save')->willThrowException(new ORMException());
        $this->expectException(UrlShortingFailedException::class);

        $this->instance->encode(self::$URL_FOR_ENCODE);
    }

    public function testDecodeWhenUrlFound()
    {
        $encoded = 'test';
        $return = '123';
        $shortUrl = $this->getShortUrl($return);
        $this->bijectiveConverter->expects($this->exactly(1))->method('decode')->with($encoded)->willReturn('123');
        $this->shortUrlRepository->expects($this->once())->method('find')->with('123')->willReturn($shortUrl);

        $result = $this->instance->decode($encoded);
        $this->assertEquals($result, $shortUrl->getUrl());
        $this->assertEquals(123, $shortUrl->getId());
    }

    public function testDecodeWhenUrlNotFound()
    {
        $this->bijectiveConverter->expects($this->exactly(1))->method('decode')->with('test')->willReturn('123');
        $this->shortUrlRepository->expects($this->once())->method('find')->with('123')->willReturn(null);
        $result = $this->instance->decode('test');
        $this->assertNull($result);
    }
}
